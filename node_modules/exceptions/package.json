{
  "name": "exceptions",
  "version": "0.1.1",
  "author": {
    "name": "Allan Boyd",
    "email": "millionyearsold@gmail.com"
  },
  "description": "Syntactic sugar for referencing and throwing common named and custom errors/exceptions",
  "keywords": [
    "exception",
    "error"
  ],
  "bugs": {
    "url": "http://github.com/allanmboyd/exceptions/issues"
  },
  "main": "lib/exceptions.js",
  "directories": {
    "lib": "./lib"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/allanmboyd/exceptions.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "scripts": {
    "test": "./node_modules/jshint/bin/hint lib/exceptions.js test/testExceptions.js && ./node_modules/nodeunit/bin/nodeunit test/testExceptions.js"
  },
  "dependencies": {
    "formaterrors": "0.1.1"
  },
  "devDependencies": {
    "jshint": "0.5.6",
    "should": "0.4.2",
    "nodeunit": "0.7.1"
  },
  "engine": {
    "node": ">= 0.6.6"
  },
  "readme": "Exceptions\n==========\n\nTrivial API and associated static instances of Exception that make it slightly simpler to throw common and\ncustom exceptions that are not already available in Javascript. Using static instances for Exceptions also\nhelps to maintain consistency between exception names both when throwing and catching (and reduces the likelihood\nof typos in name literal strings causing bugs).\n\nIn a language like Java there are checked and unchecked exceptions. In Javascript (probably fortunately) there\nare no checked exceptions. There are only Errors. Much of the time I am not really interested in throwing or\ncatching Errors because usually they are highlighting a bug that needs to be fixed. However, there are times when it is\nuseful to throw and catch Errors for instance if my application depends upon an external resource (like a datastore or\nweb service) that suddenly stops responding or changes behaviour in an unexpected way. Often in such cases I would\nrather have my application log the details and continue to operate or take some mitigating action instead of merely\nterminating or returning null etc. These are the situations for which Exceptions is designed.\n\nThe idea is that this works with the current Javascript Error mechanism as a complement to it. Exceptions and Errors\nare meant to co-exist - in fact all Exceptions really do is throw Errors and provide a well defined means to compare\nErrors within a catch block (for example).\n\nExceptions uses [formatErrors](https://github.com/allanmboyd/formaterrors) to remove itself from the stacktrace of\nthrown errors.\n\nHopefully the list of static common Exception instances will grow over time.\n\n\nInstallation\n------------\n\n    $npm install exceptions\n\nAlternatively include as a dependency within your *package.json* and:\n\n    $npm link\n\n\nUsage\n-----\n\nThe API is very trivial. An Exception object has a `name` and a `thro` function. The name is used for identification\nand the function is used to throw an Error with that name along with a message passed into the `thro` function. Here is\nan example that throws an IllegalStateException with a message of \"Bad state\"; it catches it and logs the message:\n\n    var exceptions = require(\"exceptions\");\n    try {\n        exceptions.ILLEGAL_STATE.thro(\"Bad state\");\n    } catch (error) {\n        if (error.name === exceptions.ILLEGAL_STATE.name) {\n            console.log(\"Got an IllegalStateException: \" + error.message);\n        }\n    }\n\nCustom exceptions can easily be created as needed:\n\n    var exceptions = require(\"exceptions\");\n    var myException = new exceptions.Exception(\"CustomException\");\n    try {\n        myException.thro(\"my exception\");\n    } catch (error) {\n        if (error.name === myException.name) {\n            console.log(\"Caught my exception\");\n        }\n    }\n\nAnd thrown exceptions can optionally be given a cause (i.e. another Error that is to blame) that is included in the\nstack trace:\n\n    var exceptions = require(\"exceptions\");\n    var cause = new Error(\"I caused it. I'm sorry. It was an accident\");\n    try {\n        exceptions.ILLEGAL_STATE.thro(\"Bad state with cause\", cause);\n    } catch (error) {\n        console.log(error.stack);\n    }\n\nSee test/testExceptions.js for some more examples.\n\nAPI\n---\n\nTypes\n-----\n\n###Exception###\n*Constructor:* new Exception(name)\n\nAn Exception. This does not extend or replace the Javascript Error type. Rather its purpose is to make throwing\nand catching non-standard Javascript Errors simpler and less prone to .... errors.\n\n\nVariables\n---------\n\n###ILLEGAL_ARGUMENT###\n\nAn IllegalArgumentException instance of Exception.\n\n\n###ILLEGAL_STATE###\n\nAn IllegalStateException instance of Exception.\n\n\n###IO###\n\nAn IOException instance of Exception.\n\n\nTesting\n-------\n\nTests utilise [nodeunit](https://github.com/caolan/nodeunit). In addition jshint is run against both lib and test\njavascript files.\n\nFirst install the dependencies:\n\n    $ npm link\n\nThen to run the tests:\n\n    $ npm test\n\n\n\nContributing\n------------\n\nContributions are welcome. Please create tests for any updates and ensure jshint is run on any new files. Currently\nnpm test will run jshint on all lib and test javascript as well as running all the tests.\n\n\nBugs & Feature Suggestions\n--------------------------\n\nhttps://github.com/allanmboyd/exceptions/issues\n\n",
  "readmeFilename": "README.md",
  "_id": "exceptions@0.1.1",
  "dist": {
    "shasum": "593930cb2e60c29d95138d91b55b38b209e32fb7"
  },
  "_from": "exceptions@",
  "_resolved": "https://registry.npmjs.org/exceptions/-/exceptions-0.1.1.tgz"
}
